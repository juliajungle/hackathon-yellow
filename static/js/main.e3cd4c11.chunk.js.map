{"version":3,"sources":["components/Nav.js","components/Scenario.js","components/Feature.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["StyledNav","styled","nav","Nav","StyledTitle","input","h3","StyledWrapper","div","Scenario","name","steps","type","map","step","Feature","userStory","scenarios","console","log","scenarioName","scenarioSteps","data","Results","featureName","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAEMA,EAAYC,IAAOC,IAAV,gYA0BFC,EAAM,WACjB,OACE,eAACH,EAAD,WACE,0CACA,+BACE,2CACA,kD,OC/BFI,GADiBH,IAAOI,MAAV,0BACAJ,IAAOK,GAAV,+CAIXC,EAAgBN,IAAOO,IAAV,iFAKNC,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC/B,OACE,gCACE,eAACJ,EAAD,WACG,IACD,cAACH,EAAD,UAAcM,IACd,uBAAOE,KAAK,gBAGbD,EAAME,KAAI,SAACC,GAAD,OACT,4BAAeA,GAAPA,UCpBHC,EAAU,SAAC,GAAoC,IAAlCL,EAAiC,EAAjCA,KAAMM,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAEzC,OADAC,QAAQC,IAAI,CAAEF,cAEZ,gCACE,6BAAKP,IACL,4BAAIM,IACHC,EAAUJ,KAAI,YAAsC,IAAnCO,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAC9B,OACE,cAAC,EAAD,CAEEX,KAAMU,EACNT,MAAOU,GAFFD,UCTjBF,QAAQC,IAAIG,GAIL,IAAMC,EAAU,WACrB,IAAQC,EAAsCF,EAAtCE,YAAaR,EAAyBM,EAAzBN,UAAWC,EAAcK,EAAdL,UAChC,OACE,8BACE,cAAC,EAAD,CAASP,KAAMc,EAAaR,UAAWA,EAAWC,UAAWA,OCKpDQ,MAZf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,eAClB,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e3cd4c11.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst StyledNav = styled.nav`\n  font-size: 16px;\n  border-right: 1px solid lightgrey;\n  display: flex;\n  flex-direction: column;\n  margin-right: 20px;\n  padding: 20px;\n\n  h1 {\n    font-size: 24px;\n    color: #51ddb4;\n    padding: 0;\n    margin: 0 0 20px;\n  }\n\n  ul {\n    color: #1a1a1a;\n    list-style: none;\n    padding: 0;\n    margin: 0 0 20px;\n  }\n\n  li {\n  }\n`;\n\nexport const Nav = () => {\n  return (\n    <StyledNav>\n      <h1>Features</h1>\n      <ul>\n        <li>Feature 1</li>\n        <li>Feature 2</li>\n      </ul>\n    </StyledNav>\n  );\n};\n","import styled from \"styled-components\";\n\nconst StyledCheckbox = styled.input``;\nconst StyledTitle = styled.h3`\n  margin-top: 0;\n`;\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Scenario = ({ name, steps }) => {\n  return (\n    <div>\n      <StyledWrapper>\n        {\" \"}\n        <StyledTitle>{name}</StyledTitle>\n        <input type=\"checkbox\" />\n      </StyledWrapper>\n\n      {steps.map((step) => (\n        <p key={step}>{step}</p>\n      ))}\n    </div>\n  );\n};\n","import { Scenario } from \"./Scenario\";\n\nexport const Feature = ({ name, userStory, scenarios }) => {\n  console.log({ scenarios });\n  return (\n    <div>\n      <h3>{name}</h3>\n      <p>{userStory}</p>\n      {scenarios.map(({ scenarioName, scenarioSteps }) => {\n        return (\n          <Scenario\n            key={scenarioName}\n            name={scenarioName}\n            steps={scenarioSteps}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import data from \"../data.json\";\nimport { Feature } from \"./Feature\";\nconsole.log(data);\n\n// In future this component would map over each feature but for now we just have one\n\nexport const Results = () => {\n  const { featureName, userStory, scenarios } = data;\n  return (\n    <div>\n      <Feature name={featureName} userStory={userStory} scenarios={scenarios} />\n    </div>\n  );\n};\n","import { Nav } from \"./components/Nav\";\nimport { Results } from \"./components/Results\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <div className=\"App-container\">\n        <Nav />\n        <Results />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}